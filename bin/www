#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('temp:server');
var http = require('http');
var io = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.io server.
 */

io = io(server);

var userIdSeq = 0;
var activeConnections = [];
io.on('connection', function(socket) {

  // Create userId and signal that a new peer joined
  socket.on('init', function() {
    socket.userId = userIdSeq++;
    console.log('User #' + socket.userId + ' joined');
    activeConnections.forEach(function(peer) {
      console.log('Signalling peer.join to user #' + peer.userId);
      peer.emit('peer.joined', socket.userId);
    });
    activeConnections[socket.userId] = socket;
    socket.emit('id.created', socket.userId);
  });

  // Route PeerConnection sdp offer/answer and ice candidates to appropriate receiver
  socket.on('signal', function(data) {
    console.log('Forwarding ' + data.type + ' signal from user #' + data.senderId + ' to user #' + data.receiverId);
    activeConnections[data.receiverId].emit('signal', data);
  });

  socket.on('disconnect', function() {
    console.log('User #' + socket.userId + ' left');
    delete activeConnections.indexOf(socket);
    activeConnections.forEach(function(peer) {
      peer.emit('peer.left', socket.userId);
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
